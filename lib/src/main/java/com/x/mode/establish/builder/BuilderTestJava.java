package com.x.mode.establish.builder;

/**
 * 建造者模式：
 *          一步步创建一个包含多个组成部分的复杂对象，建造者模式为解决此类问题而生，它将客户端与包含多个组成部分（或部件）的复杂对象的创建过程分离，
 *          客户端无须知道复杂对象的内部组成部分与装配方式，只需要知道所需建造者的类型即可。它关注如何一步一步创建一个的复杂对象，不同的具体建造者定
 *          义了不同的创建过程，且具体建造者相互独立，增加新的建造者非常方便，无须修改已有代码，系统具有较好的扩展性
 * 建造者模式包含如下几个角色：
 *          Builder(抽象建造者)：
 *                          他为创建一个产品Product对象的各个部分指定抽象接口，在改接口中一般声明两类方法，一类方法是buildPartX（），用于创建复杂
 *                          对象的各个部件；另一类方法是getResult（），他们用于返回复杂对象。Builder既可以是抽象类，也可以是接口
 *          ConcreteBuilder(具体建造者)：
 *                          实现了Builder接口，实现各个部件的具体构造和装配方法，定义并明确它所创建的复杂对象，也可以提供一个方法返回创建
 *                          好的复杂产品对象。
 *          Product（产品角色）：
 *                          他是被构建的复杂对象，包含多个组成部件，具体建造者创建该产品的内部表示并定义它的装配过程
 *          Director（指挥者）：
 *                          又称导演类，负责安排复杂对象的建造次序，指挥者与抽象建造者之间存在关联关系，可以在其construct（）建造方法中调用建造者对象部件
 *                          与装配方法，完成复杂对象的建造。客户端一般只需要与指挥者进行交互，在客户端确定具体建造者的类型，并实例化具体建造者对象，然后通过
 *                          指挥者类的构造函数或者setter方法传入到指挥者类当中。
 * 主要优点
 * 建造者模式的主要优点如下：
 * (1) 在建造者模式中，客户端不必知道产品内部组成的细节，将产品本身与产品的创建过程解耦，使得相同的创建过程可以创建不同的产品对象。
 * (2) 每一个具体建造者都相对独立，而与其他的具体建造者无关，因此可以很方便地替换具体建造者或增加新的具体建造者，用户使用不同的具体建造者即可得到不同的产品对象。
 *     由于指挥者类针对抽象建造者编程，增加新的具体建造者无须修改原有类库的代码，系统扩展方便，符合“开闭原则”
 * (3) 可以更加精细地控制产品的创建过程。将复杂产品的创建步骤分解在不同的方法中，使得创建过程更加清晰，也更方便使用程序来控制创建过程。
 *
 */
public class BuilderTestJava {
    public static void main(String[] args) {
        Builder builder = new BuilderImpl();
        Director director = new Director(builder);
        Product product = director.construct();
        System.out.println(product.toString());
    }
}
